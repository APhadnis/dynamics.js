// Generated by CoffeeScript 1.4.0
(function() {
  var App, BrowserSupport, Graph, Tools, UIProperty, UISlider,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BrowserSupport = (function() {

    function BrowserSupport() {}

    BrowserSupport.transform = function() {
      return this.withPrefix("transform");
    };

    BrowserSupport.keyframes = function() {
      if (document.body.style.webkitAnimation !== void 0) {
        return "-webkit-keyframes";
      }
      if (document.body.style.mozAnimation !== void 0) {
        return "-moz-keyframes";
      }
      return "keyframes";
    };

    BrowserSupport.withPrefix = function(property) {
      var prefix;
      prefix = this.prefixFor(property);
      if (prefix !== '') {
        return "-" + (prefix.toLowerCase()) + "-" + property;
      }
      return property;
    };

    BrowserSupport.prefixFor = function(property) {
      var k, prefix, prop, propArray, propertyName, _i, _j, _len, _len1, _ref;
      propArray = property.split('-');
      propertyName = "";
      for (_i = 0, _len = propArray.length; _i < _len; _i++) {
        prop = propArray[_i];
        propertyName += prop.substring(0, 1).toUpperCase() + prop.substring(1);
      }
      _ref = ["Webkit", "Moz"];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        prefix = _ref[_j];
        k = prefix + propertyName;
        if (document.body.style[k] !== void 0) {
          return prefix;
        }
      }
      return '';
    };

    return BrowserSupport;

  })();

  Graph = (function() {

    function Graph(canvas) {
      this._drawCurve = __bind(this._drawCurve, this);

      this.draw = __bind(this.draw, this);
      this.canvas = canvas;
      this.ctx = canvas.getContext('2d');
      this.r = window.devicePixelRatio || 1;
      if (this.r) {
        canvas.width = canvas.width * this.r;
        canvas.height = canvas.height * this.r;
        canvas.style[BrowserSupport.prefixFor('transform-origin') + 'TransformOrigin'] = "0 0";
        canvas.style[BrowserSupport.prefixFor('transform') + 'Transform'] = 'scale(' + (1 / this.r) + ')';
      }
    }

    Graph.prototype.draw = function() {
      var args, color, colorI, colors, defaultColor, graph, graphes, h, i, points, r, step, w, _i, _j, _k, _len, _len1, _name, _ref, _ref1, _results;
      r = window.devicePixelRatio;
      w = this.canvas.width;
      h = this.canvas.height;
      step = 0.001;
      this.ctx.clearRect(0, 0, w, h);
      this.ctx.strokeStyle = '#D5E6F8';
      this.ctx.lineWidth = 1;
      this.ctx.beginPath();
      this.ctx.moveTo(0, 0.67 * h);
      this.ctx.lineTo(w, 0.67 * h);
      this.ctx.stroke();
      this.ctx.beginPath();
      this.ctx.moveTo(0, 0.34 * h);
      this.ctx.lineTo(w, 0.34 * h);
      this.ctx.stroke();
      this.tween.init();
      graphes = [];
      colors = ['#007EFF'];
      defaultColor = '#D5E6F8';
      colorI = 0;
      while (args = this.tween.next(step)) {
        for (i = _i = 1, _ref = args.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          graphes[_name = i - 1] || (graphes[_name] = {
            points: []
          });
          graphes[i - 1].points.push([args[0], args[i]]);
        }
        if (args[0] >= 1) {
          break;
        }
      }
      for (_j = 0, _len = graphes.length; _j < _len; _j++) {
        graph = graphes[_j];
        color = defaultColor;
        if (colorI < colors.length) {
          color = colors[colorI];
        }
        graph.color = color;
        graph.index = colorI;
        colorI += 1;
      }
      _ref1 = graphes.reverse();
      _results = [];
      for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
        graph = _ref1[_k];
        points = graph.points;
        this.ctx.beginPath();
        this.ctx.strokeStyle = graph.color;
        this._drawCurve(points);
        if (graph.index === 0) {
          this.ctx.lineWidth = 2 * r;
        } else {
          this.ctx.lineWidth = 1 * r;
        }
        _results.push(this.ctx.stroke());
      }
      return _results;
    };

    Graph.prototype._drawCurve = function(points) {
      var h, point, r, t, v, w, _i, _len, _results;
      r = window.devicePixelRatio;
      w = this.canvas.width;
      h = this.canvas.height;
      _results = [];
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        t = point[0], v = point[1];
        if (t === 0) {
          _results.push(this.ctx.moveTo(t * w, h - ((0.33 + (v * 0.33)) * h)));
        } else {
          _results.push(this.ctx.lineTo(t * w, h - ((0.33 + (v * 0.33)) * h)));
        }
      }
      return _results;
    };

    return Graph;

  })();

  UIProperty = (function() {

    function UIProperty(options) {
      this.options = options != null ? options : {};
      this.setValue = __bind(this.setValue, this);

      this.el = document.createElement('div');
      this.label = document.createElement('label');
      this.label.innerHTML = this.options.property;
      this.valueEl = document.createElement('div');
      this.valueEl.classList.add('value');
      this.valueEl.classList.add(options.property);
      this.el.appendChild(this.label);
      this.el.appendChild(this.valueEl);
      this.valueEl.innerHTML = this.options.value;
    }

    UIProperty.prototype.setValue = function(value) {
      this.options.value = value;
      return this.valueEl.innerHTML = this.options.value;
    };

    return UIProperty;

  })();

  UISlider = (function() {

    function UISlider(options) {
      var _base, _base1;
      this.options = options != null ? options : {};
      this._windowMouseUp = __bind(this._windowMouseUp, this);

      this._windowMouseMove = __bind(this._windowMouseMove, this);

      this._controlMouseDown = __bind(this._controlMouseDown, this);

      this._updateLeftFromValue = __bind(this._updateLeftFromValue, this);

      this.value = __bind(this.value, this);

      (_base = this.options).min || (_base.min = 0);
      (_base1 = this.options).max || (_base1.max = 1000);
      if (this.options.value === void 0) {
        this.options.value = 10;
      }
      this.width = 205 - 11;
      this.el = document.createElement('div');
      this.label = document.createElement('label');
      this.label.innerHTML = this.options.property;
      this.valueEl = document.createElement('div');
      this.valueEl.classList.add('value');
      this.valueEl.classList.add(options.property);
      this.slider = document.createElement('div');
      this.slider.classList.add('slider');
      this.slider.classList.add(options.property);
      this.bar = document.createElement('div');
      this.bar.classList.add('bar');
      this.control = document.createElement('div');
      this.control.classList.add('control');
      this.slider.appendChild(this.bar);
      this.slider.appendChild(this.control);
      this.el.appendChild(this.label);
      this.el.appendChild(this.valueEl);
      this.el.appendChild(this.slider);
      this.valueEl.innerHTML = this.options.value;
      this._updateLeftFromValue();
      this.control.addEventListener('mousedown', this._controlMouseDown);
    }

    UISlider.prototype.value = function() {
      return this.options.value;
    };

    UISlider.prototype._updateLeftFromValue = function() {
      return this.control.style.left = (this.options.value - this.options.min) / (this.options.max - this.options.min) * this.width + "px";
    };

    UISlider.prototype._controlMouseDown = function(e) {
      this.dragging = true;
      this.startPoint = [e.pageX, e.pageY];
      this.startLeft = parseInt(this.control.style.left || 0);
      window.addEventListener('mousemove', this._windowMouseMove);
      return window.addEventListener('mouseup', this._windowMouseUp);
    };

    UISlider.prototype._windowMouseMove = function(e) {
      var dX, newLeft;
      if (!this.dragging) {
        return;
      }
      dX = e.pageX - this.startPoint[0];
      newLeft = this.startLeft + dX;
      if (newLeft > this.width) {
        newLeft = this.width;
      } else if (newLeft < 0) {
        newLeft = 0;
      }
      this.options.value = Math.round(newLeft / this.width * (this.options.max - this.options.min) + this.options.min);
      this.valueEl.innerHTML = this.options.value;
      if (typeof this.onUpdate === "function") {
        this.onUpdate();
      }
      return this.control.style.left = newLeft + "px";
    };

    UISlider.prototype._windowMouseUp = function(e) {
      this.dragging = false;
      window.removeEventListener('mousemove', this._windowMouseMove);
      return window.removeEventListener('mouseup', this._windowMouseUp);
    };

    return UISlider;

  })();

  Tools = (function() {
    var _this = this;

    function Tools() {}

    Tools.valuesFromURL = function() {
      var arg, k, query, url, v, values, _i, _len, _ref, _ref1;
      url = (document.location.toString() || '').split('#');
      values = {};
      if (url.length > 1) {
        query = url[1];
        _ref = query.split(',');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          arg = _ref[_i];
          _ref1 = arg.split('='), k = _ref1[0], v = _ref1[1];
          values[k] = v;
        }
      }
      return values;
    };

    Tools.saveValues = function(args) {
      var argsString, currentURL, k, v;
      argsString = '';
      for (k in args) {
        v = args[k];
        if (argsString !== '') {
          argsString += ",";
        }
        argsString += "" + k + "=" + v;
      }
      currentURL = (document.location.toString() || '').split('#')[0];
      return document.location = currentURL + "#" + argsString;
    };

    return Tools;

  }).call(this);

  App = (function() {

    App.prototype.dynamicsClasses = [Dynamics.Spring, Dynamics.SelfSpring, Dynamics.Gravity, Dynamics.GravityWithForce];

    function App() {
      this.animate = __bind(this.animate, this);

      this.createDynamic = __bind(this.createDynamic, this);

      this.updateCode = __bind(this.updateCode, this);

      this.update = __bind(this.update, this);

      this.updateOptions = __bind(this.updateOptions, this);

      this.selectDidChange = __bind(this.selectDidChange, this);

      var aDynamicsClass, option, _i, _len, _ref;
      this.currentCircle = null;
      this.codeSection = document.querySelector('section.code');
      this.track = document.querySelector('div.track');
      this.select = document.querySelector('select.dynamics');
      this.dynamicsClass = this.dynamicsClasses[0];
      _ref = this.dynamicsClasses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        aDynamicsClass = _ref[_i];
        if (aDynamicsClass.name === Tools.valuesFromURL().dynamic) {
          this.dynamicsClass = aDynamicsClass;
        }
        option = document.createElement('option');
        option.innerHTML = "Dynamics." + aDynamicsClass.name;
        option.value = aDynamicsClass.name;
        option.selected = aDynamicsClass === this.dynamicsClass;
        this.select.appendChild(option);
      }
      this.select.addEventListener('change', this.selectDidChange);
      this.graph = new Graph(document.querySelector('canvas'));
      this.sliders = [];
      this.properties = [];
      this.updateOptions();
      this.update();
    }

    App.prototype.selectDidChange = function() {
      var name;
      name = this.select.options[this.select.selectedIndex].value;
      this.dynamicsClass = eval("Dynamics." + name);
      this.updateOptions();
      return this.update();
    };

    App.prototype.updateOptions = function() {
      var config, property, slider, tweenOptionsEl, uiProperty, values, _i, _len, _ref, _ref1, _results;
      tweenOptionsEl = document.querySelector('.options');
      tweenOptionsEl.innerHTML = '';
      values = Tools.valuesFromURL();
      this.sliders = [];
      this.properties = [];
      _ref = this.dynamicsClass.properties;
      for (property in _ref) {
        config = _ref[property];
        if (config.editable === false) {
          uiProperty = new UIProperty({
            value: 'N/A',
            property: property
          });
          tweenOptionsEl.appendChild(uiProperty.el);
          this.properties.push(uiProperty);
        } else {
          slider = new UISlider({
            min: config.min,
            max: config.max,
            value: values[property] || config["default"],
            property: property
          });
          tweenOptionsEl.appendChild(slider.el);
          this.sliders.push(slider);
        }
      }
      _ref1 = this.sliders;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slider = _ref1[_i];
        _results.push(slider.onUpdate = this.update);
      }
      return _results;
    };

    App.prototype.update = function() {
      var args, slider, uiProperty, _i, _j, _len, _len1, _ref, _ref1;
      args = {};
      _ref = this.sliders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slider = _ref[_i];
        args[slider.options.property] = slider.value();
      }
      if (this.dynamicsClass) {
        args['dynamic'] = this.dynamicsClass.name;
      }
      Tools.saveValues(args);
      if (this.animationTimeout) {
        clearTimeout(this.animationTimeout);
      }
      this.animationTimeout = setTimeout(this.animate, 400);
      this.createDynamic();
      this.graph.tween = this.dynamic.tween();
      this.graph.draw();
      _ref1 = this.properties;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        uiProperty = _ref1[_j];
        uiProperty.setValue(this.dynamic.tween()[uiProperty.options.property]());
      }
      return this.updateCode();
    };

    App.prototype.updateCode = function() {
      var code, options, slider, translateX, _i, _len, _ref;
      translateX = this.dynamicsClass !== Dynamics.SelfSpring ? 350 : 50;
      options = '';
      _ref = this.sliders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slider = _ref[_i];
        if (options !== '') {
          options += ",\n";
        }
        options += "&nbsp;&nbsp;<strong>" + slider.options.property + "</strong>: " + (slider.value());
      }
      code = 'new <strong>Dynamics.' + this.dynamicsClass.name + '</strong>(document.getElementId("circle"), {\n&nbsp;&nbsp;<strong>translateX</strong>: 0\n}, {\n&nbsp;&nbsp;<strong>translateX</strong>: ' + translateX + '\n}, {\n' + options + '\n}).start();';
      return this.codeSection.innerHTML = code;
    };

    App.prototype.createDynamic = function() {
      var circle, from, options, shouldDeleteCircle, slider, to, _i, _len, _ref,
        _this = this;
      options = {};
      _ref = this.sliders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slider = _ref[_i];
        options[slider.options.property] = slider.value();
      }
      if (this.dynamicsClass !== Dynamics.SelfSpring) {
        from = {
          translateX: 0
        };
        to = {
          translateX: 350
        };
      } else {
        from = {
          translateX: 0
        };
        to = {
          translateX: 50
        };
      }
      if (!this.currentCircle) {
        this.currentCircle = document.createElement('div');
        this.currentCircle.classList.add('circle');
        this.currentCircle.addEventListener('click', function() {
          return _this.animate();
        });
        new Dynamics.Spring(this.currentCircle, {
          scale: 0
        }, {
          scale: 1
        }, {
          frequency: 0,
          friction: 600,
          anticipationStrength: 100,
          anticipationSize: 10,
          duration: 1000
        }).start();
        document.querySelector('section.demo').appendChild(this.currentCircle);
      }
      circle = this.currentCircle;
      shouldDeleteCircle = !this.dynamicsClass.returnsToSelf;
      options.complete = function() {
        if (!shouldDeleteCircle) {
          return;
        }
        _this.createDynamic();
        return new Dynamics.Spring(circle, {
          translateX: !_this.dynamicsClass.returnsToSelf ? 350 : 0,
          scale: 1
        }, {
          translateX: !_this.dynamicsClass.returnsToSelf ? 350 : 0,
          scale: 0
        }, {
          frequency: 0,
          friction: 600,
          anticipationStrength: 100,
          anticipationSize: 10,
          duration: 1000,
          complete: function() {
            return circle.parentNode.removeChild(circle);
          }
        }).start();
      };
      this.dynamic = new this.dynamicsClass(circle, from, to, options);
      if (this.dynamicsClass !== Dynamics.SelfSpring) {
        return this.track.classList.remove('tiny');
      } else {
        return this.track.classList.add('tiny');
      }
    };

    App.prototype.animate = function() {
      this.createDynamic();
      this.dynamic.start();
      if (!this.dynamicsClass.returnsToSelf) {
        return this.currentCircle = null;
      }
    };

    return App;

  })();

  document.addEventListener("DOMContentLoaded", function() {
    var app;
    return app = new App;
  }, false);

}).call(this);
